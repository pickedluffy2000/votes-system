# Alternativa ao Docker

Faaaala galera, tudo bem com voc√™s?

Infelizmente o Docker pode ser um problema para alguns usu√°rios, principalmente aqueles que est√£o utilizando o Windows. Nesse guia r√°pido, vamos mostrar pra voc√™s a como trocar do PostgreSQL para o SQLite (banco em arquivo) e utilizar um servi√ßo online para o Redis.

## Configurando o SQLite

1. Se tiver a pasta `prisma/migrations`, apague ela. (est√° tudo bem se n√£o tiver)
2. No arquivo `prisma/schema` , troque o valor de `provider` para `sqlite` 
    
    ```sql
    datasource db {
      provider = "sqlite" // Essa linha
      url      = env("DATABASE_URL")
    }
    ```
    
3. No arquivo `.env` troque a URL de conex√£o para um novo caminho:
    
    ```tsx
    DATABASE_URL="file:./app.db"
    ```
    
    Recomendamos colocar no `.gitignore` esses valores:
    
    ```
    *.db
    *.db-journal
    ```
    
4. Executar o comando `npx prisma migrate dev` para criar as migrations. Informe o nome que preferir.
5. Por fim, no arquivo `src/http/routes/create-poll.ts`, n√£o √© poss√≠vel utilizar o `createMany` com o SQLite, vamos ent√£o trocar para:
    
    ```tsx
    // ...
    // Primeiro, criar a poll, sem options.
    const poll = await prisma.poll.create({
      data: {
        title,
      }
    })
    
    // Em seguida, utilizar um Promise.all para criar todas as options:
    await Promise.all(options.map((option) => {
      return prisma.pollOption.create({
        data: {
          title: option,
          pollId: poll.id
        }
      })
    }))
    ```
    

## Configurando o Upstash + Redis

Antes de tudo, o que √© o Upstash? Upstash √© uma plataforma com diversos servi√ßos para ambiente serverless (outro tipo de aplica√ß√£o que n√£o precisa se preocupar agora, foco jovem gafanhoto), e um desses servi√ßos √© um Banco Redis. O plano free √© bem generoso.

1. Crie uma conta no site: [Upstash: Serverless Data Platform](https://upstash.com/)
2. No menu ao topo da p√°gina, selecione `Redis` e clique em ‚ÄúCreate Database‚Äù.
    
    Esse modal dever√° ser aberto:
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/08f749ff-d06d-49a8-a488-9846e081b224/1b8daaec-62bb-4a07-908a-5db301a75e90/Untitled.png)
    
    Coloque o nome de sua prefer√™ncia, mantenha a op√ß√£o `Regional` selecionada e no select abaixo escolha `us-east-1`.
    
    N√£o precisa marcar nenhuma das outras op√ß√µes. Clique em `Create`.
    
3. Ao criar sua Database, acesse ela e ter√° uma p√°gina parecida com essa:
    
    ![bcffb95ba92461382b864aec819abf913f8846d3b48c344b2b7f9ff04a96c46e copy.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/08f749ff-d06d-49a8-a488-9846e081b224/24d79027-6fb8-4411-8148-0fde919371df/bcffb95ba92461382b864aec819abf913f8846d3b48c344b2b7f9ff04a96c46e_copy.jpg)
    
    Clique no bot√£o informado e copie toda a URL de conex√£o.
    
4. De volta ao seu projeto, no arquivo `.env`, crie uma nova vari√°vel com o nome `REDIS_URL` 
    
    ```
    DATABASE_URL="file:./app.db"
    REDIS_URL="URL_AQUI"
    ```
    
5. Por fim, no arquivo `src/lib/redis.ts`, vamos configurar para utilizar essa vari√°vel:
    
    ```tsx
    import { Redis } from "ioredis";
    
    if (!process.env.REDIS_URL) {
      throw new Error("Missing REDIS_URL env var");
    }
    
    export const redis = new Redis(process.env.REDIS_URL)
    ```
    
    *Voc√™ consegue visualizar os dados do banco na aba ‚ÄúData Browser‚Äù*
    

Concluindo todos esses passos a aplica√ß√£o j√° ir√° funcionar sem precisar do Docker. Nice! üöÄ

Segue o link do commit com todas essas altera√ß√µes para caso queira comparar: